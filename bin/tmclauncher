#!/bin/bash
TMC_VERSION='0-20130210'

function fgcolor(){
	case ${TERM} in
		*color)	echo -ne "\033[${1}m${2}\033[00m";;
		*)	echo -n "${2}";;
	esac
}
function boldcolor(){
	fgcolor "01;$1" "$2"
}
function print_help(){
	local scrname=$(basename $0)
	cat <<EOD
$(fgcolor 34 "${scrname}"): teketo mclauncher

$(boldcolor 35 'usage:')	$(fgcolor 34 "${scrname}") $(fgcolor 32 '<operation>')

$(boldcolor 35 'operaion:')
  $(boldcolor 36 '-h'), $(boldcolor 36 '--help')		: print this help
  $(boldcolor 36 '-D'), $(boldcolor 36 '--debug')		: print debug information
  $(boldcolor 36 '-V'), $(boldcolor 36 '--version')		: print version
  $(boldcolor 36 '-u'), $(boldcolor 36 '--upgrade')		: upgrade this launcher (but no effect on this file)
  $(boldcolor 36 '-c'), $(boldcolor 36 '--create') $(boldcolor 30 '[')$(fgcolor 32 '<name>') $(boldcolor 30 '[')$(fgcolor 32 '<type>')$(boldcolor 30 ']]')
			: create sandbox with $(fgcolor 32 '<type>')
  $(boldcolor 36 '-j'), $(boldcolor 36 '--run') $(fgcolor 32 '<name>') $(fgcolor 32 '<command>') $(boldcolor 30 '[')$(fgcolor 32 '<arg')$(boldcolor 30 '..')$(fgcolor 32 '>')$(boldcolor 30 ']')
			: exec command with setting HOME to sandbox
  $(fgcolor 32 '<name>')		: start minecraft with specified sandbox
EOD
}

function run_hook_with_pipe_chain(){
	hookdir="${tmc_datadir}/hooks"
	if [ ! -e "${tmc_bindir}/tmclauncher-helper" ]; then
		echo "${tmc_bindir}/tmclauncher-helper is not found. You may run '$0 -u'"
	fi
	"${tmc_bindir}/tmclauncher-helper" $1 "${hookdir}"/*
}

function run_with_sandbox(){
	local sandbox_name sandbox

	sandbox_name="$1"
	shift
	if test -z "${sandbox_name}"; then
		echo "Please specify sandbox name" >&2
		exit 1
	fi
	sandbox="${tmc_root}/sandbox/${sandbox_name}"
	if test ! -d "${sandbox}"; then
		echo "${sandbox} is not exist" >&2
		exit 1
	fi

	HOME="${sandbox}"
	if [ -z "$1" ]; then
		echo "Specify command" >&2
		exit 1
	elif [[ "$1" = */java ]]; then
		command="$1"; shift
		"${command}" -Duser.home="${HOME}" $@
		errorcode=$?
	else
		$@
		errorcode=$?
	fi
	HOME="${old_home}"
	return ${errorcode}
}

function create_sandbox(){
	local sandbox_name sandbox_dir sandbox

	sandbox_name="$1"
	if test -z "${sandbox_name}"; then
		echo -n "sandbox name? " >&2
		read sandbox_name
		if test -z "${sandbox_name}"; then
			echo "Please specify sandbox name" >&2
			exit 1
		fi
	fi
	sandbox_dir="${tmc_root}/sandbox"
	if test ! -e "${sandbox_dir}"; then
		mkdir "${sandbox_dir}" || exit 2
	fi
	sandbox="${sandbox_dir}/${sandbox_name}"
	if test -e "${sandbox}"; then
		echo "${sandbox} is exist" >&2
		exit 1
	fi

	archdir="${tmc_datadir}/architect"
	if test ! -d "${archdir}"; then
		mkdir "${archdir}"
		if which wget >/dev/null 2>&1; then
			echo "getting https://github.com/turenar/teketo-mclauncher/raw/master/architects.tgz..."
			wget -O "${tmc_datadir}/architects.tgz" https://github.com/turenar/teketo-mclauncher/raw/master/architects.tgz || echo 'failed wget'
		else
			echo 'command "wget" is not found' >&2
			exit 2
		fi
		pushd "${tmc_datadir}" >/dev/null 2>&1
		tar -zxf architects.tgz || ( echo 'failed tar -zxf'; exit 3 )
		popd >/dev/null 2>&1
	fi

	pushd "${tmc_datadir}/architect" >/dev/null 2>&1
	select arch in *; do
		popd >/dev/null 2>&1
		"${tmc_datadir}/architect/${arch}" "${sandbox}" "${tmc_root}"
		errorcode=$?
		break
	done

	if test ${errorcode} -ne 0; then
		echo "${arch} returned ${errorcode}" >&2
		exit ${errorcode}
	elif test -e "${sandbox}"; then
		exit 0
	else
		echo "${sandbox} is not created" >&2
		exit 1
	fi
}

function backup_data(){
	sandbox=$1
	sandbox_name=$2
	backup_dst="${tmc_root}/backup"
	if [ ! -e "${backup_dst}" ]; then
		mkdir "${backup_dst}"
	fi

	this_day=$(date +%Y%m%d)
	file_name="${backup_dst}/${sandbox_name}-${this_day}.tar.gz"
	if [ -e "${file_name}" ]; then
		return 1
	fi
	echo 'Backing up...'
	pushd "${sandbox}/.." >/dev/null 2>&1
	find -P "${sandbox_name}/.minecraft" | run_hook_with_pipe_chain backup \
		| tar --dereference --no-recursion --files-from=- -zvcf "${file_name}" "${sandbox_name}"
	popd >/dev/null 2>&1
	return 0
}

function launch_minecraft(){
	local _tmc_ibus_used sandbox_name sandbox old_home errorcode
	# if tmc_hack_ibus='no', skip
	if test ! \( -v tmc_hack_ibus -a "${tmc_hack_ibus}" = 'no' \); then
		if ps -C ibus-daemon >/dev/null; then
			_tmc_ibus_used=1
		fi
	fi

	sandbox_name="$1"
	if test -z "${sandbox_name}"; then
		echo "Please specify sandbox name" >&2
		exit 1;
	fi
	sandbox="${tmc_root}/sandbox/${sandbox_name}"
	if test ! -d "${sandbox}"; then
		echo "${sandbox} is not exist" >&2
		exit 2;
	fi

	backup_data "${sandbox}" "${sandbox_name}"

	old_home="${HOME}"

	test "${_tmc_ibus_used}" -eq 1 && killall ibus-daemon

	HOME="${sandbox}"
	java -Duser.home="${HOME}" -Xmx1024m -Xms512m -jar "${sandbox}/.minecraft/launcher.jar"
	errorcode=$?
	HOME="${old_home}"

	test "${_tmc_ibus_used}" -eq 1 && ibus-daemon --xim -r -d
	exit ${errorcode}
}

function debug_print(){
	echo "HOME=		${HOME}"
	echo "tmc_root=	${tmc_root}"
	if [ ! -v tmc_hack_ibus ]; then
		tmc_hack_ibus='<unset>'
	fi
	if [ "${tmc_hack_ibus}" '!=' 'no' ]; then
		if ps -C ibus-daemon >/dev/null; then
			_tmc_ibus_used=yes
		fi
	fi
	echo "tmc_hack_ibus=	${tmc_hack_ibus}"
	echo "*tmc_datadir=	${tmc_datadir}"
	echo "*archdir=	${tmc_datadir}/architect"
	echo "*hookdir=	${tmc_datadir}/hooks"
	echo "*tmc_bindir=	${tmc_bindir}"
	echo "?version=	${TMC_VERSION}"
	echo "?ibus hack=	${_tmc_ibus_used:-no}"
}

function upgrade_tmclauncher(){
	pushd "${tmc_root}" >/dev/null 2>&1
	if which git >/dev/null 2>&1; then
		upgrade_tmclauncher_with_git
	else
		upgrade_tmclauncher_without_git
	fi
	popd >/dev/null 2>&1
}

function upgrade_tmclauncher_with_git(){
	if [ -d 'src' ]; then
		cd src
		git pull
		cd ..
	else
		mkdir src
		git clone https://github.com/turenar/teketo-mclauncher src
	fi
}
function upgrade_tmclauncher_without_git(){
	mv tmclauncher{,.bak}
	mv architects.tgz{,.bak}
	mv tmclauncher-helper{,.bak}
	echo "getting files..."
	tmc_baseurl=https://raw.github.com/turenar/teketo-mclauncher/master
	wget -nv \
		${tmc_baseurl}/bin/tmclauncher \
		${tmc_baseurl}/architects.tgz \
		${tmc_baseurl}/bin/tmclauncher-helper
	echo 'installing files...'
	if [ -e 'tmclauncher' ]; then
		echo '> chmod +x tmclauncher'
		chmod +x tmclauncher
		echo -n "    updated from ${TMC_VERSION} to "
		./tmclauncher --no-fork --version
	else
		echo '! reverting tmclauncher'
		mv tmclauncher{.bak,}
	fi
	if [ -e 'tmclauncher-helper' ]; then
		echo '> chmod +x tmclauncher-helper'
		chmod +x tmclauncher-helper
	else
		echo '! reverting tmclauncher-helper'
		mv tmclauncher-helper{.bak,}
	fi
	if [ -e 'architects.tgz' ]; then
		echo '> tar -zxf architects.tgz'
		tar -zxf architects.tgz
	else
		echo '! reverting architects.tgz'
		mv architects.tgz{.bak,}
	fi
}


if test -z "${tmc_root}"; then
	tmc_root="${HOME}/.tmclauncher"
fi

if [ "$1" = '--no-fork' ]; then
	shift
else
	if [ -e "${tmc_root}/src/bin/tmclauncher" ]; then
		export tmc_datadir="${tmc_root}/src"
		export tmc_bindir="${tmc_datadir}/bin"
		"${tmc_bindir}/tmclauncher" --no-fork $@
		exit $?
	elif [ -e "${tmc_root}/tmclauncher" ]; then
		export tmc_datadir="${tmc_root}"
		export tmc_bindir="${tmc_datadir}"
		"${tmc_bindir}/tmclauncher" --no-fork $@
		exit $?
	fi
fi

# called with '--no-fork' directly
if [ -z "${tmc_datadir}" ]; then
	export tmc_datadir="$(readlink -f $(dirname "$0")/..)"
	export tmc_bindir="${tmc_datadir}/bin"
fi

# more friendly version
if [ -d "${tmc_datadir}/.git" ]; then
	TMC_VERSION=$(git describe)
fi

if test ! -e "${tmc_root}"; then
	mkdir -p "${tmc_root}"
fi
if test ! -d "${tmc_root}"; then
	echo "$(basename "$0"): WARN: ${tmc_root} is not exist or not directory" >&2
fi
tmc_root="$(readlink -f ${tmc_root})"

case "$1" in
	'-?'|-h|--help)	print_help;;
	-V|--version)	echo "${TMC_VERSION}";;
	-c|--create)	create_sandbox "$2" "$3";;
	-D|--debug)	debug_print;;
	-j|--run)	shift; run_with_sandbox $@;;
	-u|--upgrade)	upgrade_tmclauncher;;
	-*)		echo "unknown operation: $1">&2; print_help>&2; exit 1;;
	*)		launch_minecraft "$1";;
esac


# vim: ts=8
